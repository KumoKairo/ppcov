main_html_template = '<!DOCTYPE html><html class="theme-green"><head> <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /> <title>GCC Code Coverage Report</title> <meta name="viewport" content="width=device-width, initial-scale=1.0" /> <link rel="stylesheet" href="ppcov-report.css" /></head><body> <header> <h1>GCC Code Coverage Report</h1> <hr /> <div class="summary"> <div> <table class="legend"> <th scope="row">Directory:</th> <td>./</td> </tr> <tr> <th scope="row">Date:</th> <td>$DATE$</td> </tr> <tr> <th scope="row">Coverage:</th> <td class="legend"> <span class="coverage-low">low: &ge; 0%</span> <span class="coverage-medium">medium: &ge; 75.0%</span> <span class="coverage-high">high: &ge; 90.0%</span> </td> </tr> </table> </div> <div> <table class="coverage"> <tr> <th></th> <th scope="col">Exec</th> <th scope="col">Total</th> <th scope="col">Coverage</th> </tr> <tr> <th scope="row">Lines:</th> <td>$LINES_EXEC$</td> <td>$LINES_TOTAL$</td> <td class="$LINES_COVERAGE_STYLE$">$LINES_COVERAGE_PERCENTAGE$</td> </tr> <tr> <th scope="row">Functions:</th> <td>$FUNCTIONS_EXEC$</td> <td>$FUNCTIONS_TOTAL$</td> <td class="$FUNCTIONS_COVERAGE_STYLE$">$FUNCTIONS_COVERAGE_PERCENTAGE$</td> </tr> </table> </div> </div> <hr /> </header> <main> <table class="file-list"> <col /> <colgroup span="3" /> <colgroup span="2" /> <colgroup span="2" /> <tr> <th scope="col">File</th> <th scope="colgroup" colspan=3>Lines</th> <th scope="colgroup" colspan=2>Functions</th> </tr> $FILES$ </table> <hr /> </main> <footer> Generated by PPCOV (version 0.0.1)</a> </footer></body></html>'
main_css = ':root { font-family: sans-serif; --tab_size: 4;}.theme-green, .theme-blue { --unknown_color: lightgray; --low_color: #FF6666; --medium_color: #F9FD63; --partial_covered_color: var(--medium_color); --uncovered_color: #FF8C8C; --warning_color: orangered; --notTakenBranch_color: red; --uncheckedDecision_color: darkorange; --notTakenDecision_color: red; --notInvokedCall_color: red; --excluded_color: rgb(255, 241, 229);}.theme-green { --high_color: #85E485; --covered_color: #85E485; --takenBranch_color: green; --takenDecision_color: green; --invokedCall_color: green;}.theme-blue { --high_color: #66B4FF; --covered_color: #66B4Ff; --takenBranch_color: blue; --takenDecision_color: blue; --invokedCall_color: blue;}body{ color: #000000; background-color: #FFFFFF;}h1{ text-align: center; margin: 0; padding-bottom: 10px; font-size: 20pt; font-weight: bold;}hr{ background-color: navy; height: 2px; border: 0;}/* Link formats: use maroon w/underlines */a:link{ color: navy; text-decoration: underline;}a:visited{ color: maroon; text-decoration: underline;}/*** Summary formats ***/.summary{ display: flex; flex-flow: row wrap; max-width: 100%; justify-content: flex-start;}.summary > table{ flex: 1 0 7em; border: 0;}.summary > :last-child { margin-left: auto;}table.legend{ color: black; display: flex; flex-flow: row wrap; justify-content: flex-start;}table.legend th[scope=row]{ font-weight: normal; text-align: right; white-space: nowrap;}table.legend td{ color: blue; text-align: left; white-space: nowrap; padding-left: 5px;}table.legend td.legend{ color: black; font-size: 80%;}table.legend td.warning_text{ color: var(--warning_color);}table.coverage td,table.coverage th{ text-align: right; color: black; font-weight: normal; white-space: nowrap; padding-left: 5px; padding-right: 4px;}table.coverage td{ background-color: LightSteelBlue;}table.coverage th[scope=row]{ color: black; font-weight: normal; white-space: nowrap;}table.coverage th[scope=col]{ color: blue; font-weight: normal; white-space: nowrap;}table.legend span{ margin-right: 4px; padding: 2px;}table.legend span.coverage-unknown,table.legend span.coverage-none,table.legend span.coverage-low,table.legend span.coverage-medium,table.legend span.coverage-high{ padding-left: 3px; padding-right: 3px;}table.legend span.coverage-unknown,table.coverage td.coverage-unknown,table.file-list td.coverage-unknow{ background-color: var(--unknown_color) !important;}table.legend span.coverage-none,table.legend span.coverage-low,table.coverage td.coverage-none,table.coverage td.coverage-low,table.file-list td.coverage-none,table.file-list td.coverage-low{ background-color: var(--low_color) !important;}table.legend span.coverage-medium,table.coverage td.coverage-medium,table.file-list td.coverage-medium{ background-color: var(--medium_color) !important;}table.legend span.coverage-high,table.coverage td.coverage-high,table.file-list td.coverage-high{ background-color: var(--high_color) !important;}/*** End of Summary formats ***//*** Meter formats ***//* Common */meter { -moz-appearance: none; width: 30vw; min-width: 4em; max-width: 15em; height: 0.75em; padding: 0; vertical-align: baseline; margin-top: 3px; /* Outer background for Mozilla */ background: none; background-color: whitesmoke;}/* Webkit */meter::-webkit-meter-bar { /* Outer background for Webkit */ background: none; background-color: whitesmoke; height: 0.75em; border-radius: 0px;}meter::-webkit-meter-optimum-value,meter::-webkit-meter-suboptimum-value,meter::-webkit-meter-even-less-good-value{ /* Inner shadow for Webkit */ border: solid 1px black;}meter.coverage-none::-webkit-meter-optimum-value,meter.coverage-low::-webkit-meter-optimum-value{ background: var(--low_color);}meter.coverage-medium::-webkit-meter-optimum-value{ background: var(--medium_color);}meter.coverage-high::-webkit-meter-optimum-value{ background: var(--high_color);}/* Mozilla */meter::-moz-meter-bar{ box-sizing: border-box;}meter:-moz-meter-optimum::-moz-meter-bar,meter:-moz-meter-sub-optimum::-moz-meter-bar,meter:-moz-meter-sub-sub-optimum::-moz-meter-bar{ /* Inner shadow for Mozilla */ border: solid 1px black;}meter.coverage-none:-moz-meter-optimum::-moz-meter-bar,meter.coverage-low:-moz-meter-optimum::-moz-meter-bar{ background: var(--low_color);}meter.coverage-medium:-moz-meter-optimum::-moz-meter-bar{ background: var(--medium_color);}meter.coverage-high:-moz-meter-optimum::-moz-meter-bar{ background: var(--high_color);}/*** End of Meter formats ***/.file-list td, .file-list th { padding: 0 10px; font-weight: bold;}.file-list th[scope^=col]{ text-align: center; color: white; background-color: SteelBlue; font-size: 120%;}.file-list th[scope=row]{ text-align: left; color: black; font-family: monospace; font-weight: bold; font-size: 110%;}.file-list tr > td,.file-list tr > th { background: aliceblue;}.file-list tr:nth-child(even) > td,.file-list tr:nth-child(even) > th { background: LightSteelBlue}.file-list tr:hover > td,.file-list tr:hover > th[scope=row]{ background-color: #ddd;}td.CoverValue{ text-align: right; white-space: nowrap;}td.coveredLine,span.coveredLine{ background-color: var(--covered_color) !important;}td.partialCoveredLine,span.partialCoveredLine{ background-color: var(--partial_covered_color) !important;}td.uncoveredLine,span.uncoveredLine{ background-color: var(--uncovered_color) !important;}td.excludedLine,span.excludedLine{ background-color: var(--excluded_color) !important;}.linebranch, .linedecision, .linecall, .linecount{ font-family: monospace; border-right: 1px gray solid; background-color: lightgray; text-align: right;}.linebranchDetails, .linedecisionDetails, .linecallDetails{ position: relative;}.linebranchSummary, .linedecisionSummary, .linecallSummary{ cursor: help;}.linebranchContents, .linedecisionContents, .linecallContents{ font-family: sans-serif; font-size: small; text-align: left; position: absolute; width: 15em; padding: 1em; background: white; border: solid gray 1px; box-shadow: 5px 5px 10px gray; z-index: 1; /* show in front of the table entries */}.takenBranch{ color: var(--takenBranch_color) !important;}.notTakenBranch{ color: var(--notTakenBranch_color) !important;}.takenDecision{ color: var(--takenDecision_color) !important;}.notTakenDecision{ color: var(--notTakenDecision_color) !important;}.uncheckedDecision{ color: var(--uncheckedDecision_color) !important;}.invokedCall{ color: var(--invokedCall_color) !important;}.notInvokedCall{ color: var(--notInvokedCall_color) !important;}.src{ padding-left: 12px; text-align: left; font-family: monospace; white-space: pre; tab-size: var(--tab_size); -moz-tab-size: var(--tab_size);}span.takenBranch,span.notTakenBranch,span.takenDecision,span.notTakenDecision,span.uncheckedDecision{ font-family: monospace; font-weight: bold;}pre{ height : 15px; margin-top: 0; margin-bottom: 0;}.listOfFunctions td, .listOfFunctions th { padding: 0 10px;}.listOfFunctions th{ text-align: center; color: white; background-color: SteelBlue;}.listOfFunctions tr > td { background: aliceblue;}.listOfFunctions tr:nth-child(even) > td { background: LightSteelBlue}.listOfFunctions tr:hover > td{ background-color: #ddd;}.listOfFunctions tr > td > a{ text-decoration: none; color: inherit;}.source-line{ height : 15px; margin-top: 0; margin-bottom: 0;}.lineno{ background-color: #EFE383; border-right: 1px solid #BBB15F; text-align: right; unicode-bidi: embed; font-family: monospace; white-space: pre;}.lineno > a{ text-decoration: none; color: inherit;}.file-list{ margin: 1em auto; border: 0; border-spacing: 1px;}.file-source table{ border-spacing: 0;}.file-source table td,.file-source table th{ padding: 1px 10px;}.file-source table th{ font-family: monospace; font-weight: bold;}.file-source table td:last-child{ width: 100%;}footer{ text-align: center; padding-top: 3px;}/* pygments syntax highlighting */pre { line-height: 125%; }td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }.hll { background-color: #ffffcc }.c { color: #3D7B7B; font-style: italic } /* Comment */.err { border: 1px solid #FF0000 } /* Error */.k { color: #008000; font-weight: bold } /* Keyword */.o { color: #666666 } /* Operator */.ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */.cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */.cp { color: #9C6500 } /* Comment.Preproc */.cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */.c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */.cs { color: #3D7B7B; font-style: italic } /* Comment.Special */.gd { color: #A00000 } /* Generic.Deleted */.ge { font-style: italic } /* Generic.Emph */.ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */.gr { color: #E40000 } /* Generic.Error */.gh { color: #000080; font-weight: bold } /* Generic.Heading */.gi { color: #008400 } /* Generic.Inserted */.go { color: #717171 } /* Generic.Output */.gp { color: #000080; font-weight: bold } /* Generic.Prompt */.gs { font-weight: bold } /* Generic.Strong */.gu { color: #800080; font-weight: bold } /* Generic.Subheading */.gt { color: #0044DD } /* Generic.Traceback */.kc { color: #008000; font-weight: bold } /* Keyword.Constant */.kd { color: #008000; font-weight: bold } /* Keyword.Declaration */.kn { color: #008000; font-weight: bold } /* Keyword.Namespace */.kp { color: #008000 } /* Keyword.Pseudo */.kr { color: #008000; font-weight: bold } /* Keyword.Reserved */.kt { color: #B00040 } /* Keyword.Type */.m { color: #666666 } /* Literal.Number */.s { color: #BA2121 } /* Literal.String */.na { color: #687822 } /* Name.Attribute */.nb { color: #008000 } /* Name.Builtin */.nc { color: #0000FF; font-weight: bold } /* Name.Class */.no { color: #880000 } /* Name.Constant */.nd { color: #AA22FF } /* Name.Decorator */.ni { color: #717171; font-weight: bold } /* Name.Entity */.ne { color: #CB3F38; font-weight: bold } /* Name.Exception */.nf { color: #0000FF } /* Name.Function */.nl { color: #767600 } /* Name.Label */.nn { color: #0000FF; font-weight: bold } /* Name.Namespace */.nt { color: #008000; font-weight: bold } /* Name.Tag */.nv { color: #19177C } /* Name.Variable */.ow { color: #AA22FF; font-weight: bold } /* Operator.Word */.w { color: #bbbbbb } /* Text.Whitespace */.mb { color: #666666 } /* Literal.Number.Bin */.mf { color: #666666 } /* Literal.Number.Float */.mh { color: #666666 } /* Literal.Number.Hex */.mi { color: #666666 } /* Literal.Number.Integer */.mo { color: #666666 } /* Literal.Number.Oct */.sa { color: #BA2121 } /* Literal.String.Affix */.sb { color: #BA2121 } /* Literal.String.Backtick */.sc { color: #BA2121 } /* Literal.String.Char */.dl { color: #BA2121 } /* Literal.String.Delimiter */.sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */.s2 { color: #BA2121 } /* Literal.String.Double */.se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */.sh { color: #BA2121 } /* Literal.String.Heredoc */.si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */.sx { color: #008000 } /* Literal.String.Other */.sr { color: #A45A77 } /* Literal.String.Regex */.s1 { color: #BA2121 } /* Literal.String.Single */.ss { color: #19177C } /* Literal.String.Symbol */.bp { color: #008000 } /* Name.Builtin.Pseudo */.fm { color: #0000FF } /* Name.Function.Magic */.vc { color: #19177C } /* Name.Variable.Class */.vg { color: #19177C } /* Name.Variable.Global */.vi { color: #19177C } /* Name.Variable.Instance */.vm { color: #19177C } /* Name.Variable.Magic */.il { color: #666666 } /* Literal.Number.Integer.Long */'

file_coverage_html_template = '<tr> <th scope="row"> $FILENAME$ </th> <td> <meter class="$LINES_COVERAGE_STYLE$" min="0" max="100" value="$LINES_COVERAGE_VALUE$" title="$LINES_COVERAGE_VALUE$%">$LINES_COVERAGE_VALUE$</meter> </td> <td class="CoverValue line-coverage $LINES_COVERAGE_STYLE$">$LINES_COVERAGE_VALUE$%</td> <td class="CoverValue line-coverage $LINES_COVERAGE_STYLE$">$LINES_EXEC$ / $LINES_TOTAL$</td> <td class="CoverValue function-coverage $FUNCTIONS_COVERAGE_STYLE$">$FUNCTIONS_COVERAGE_PERCENTAGE$%</td> <td class="CoverValue function-coverage $FUNCTIONS_COVERAGE_STYLE$">$FUNCTIONS_EXEC$ / $FUNCTIONS_TOTAL$</td> </tr>'

lines_exec_tag = '$LINES_EXEC$'
lines_total_tag = '$LINES_TOTAL$'
lines_coverage_style_tag = '$LINES_COVERAGE_STYLE$'
lines_coverage_percentage_tag = '$LINES_COVERAGE_PERCENTAGE$'
functions_exec_tag = '$FUNCTIONS_EXEC$'
functions_total_tag = '$FUNCTIONS_TOTAL$'
functions_coverage_style_tag = '$FUNCTIONS_COVERAGE_STYLE$'
functions_coverage_percentage_tag = '$FUNCTIONS_COVERAGE_PERCENTAGE$'
files_tag = '$FILES$'
filename_tage = '$FILENAME$'
lines_coverage_value_tag = '$LINES_COVERAGE_VALUE$'

import subprocess
from glob import glob
from datetime import datetime
import os
import json
import argparse
import re

parser = argparse.ArgumentParser(description='Generate HTML report for gcov files')
parser.add_argument('--exclude', type=str, help='Exclude files that match the pattern')
args = parser.parse_args()

file_coverage_stats = {}

class CoverageStats:
    lines = {}
    functions = {}

    def get_lines_executed(self):
        return len([v for v in self.lines.values() if v == True])
    
    def get_lines_total(self):
        return len(self.lines)
    
    def get_lines_coverage_percentage(self):
        return self.get_lines_executed() / self.get_lines_total() * 100

    def get_functions_executed(self):
        return len([v for v in self.functions.values() if v == True])
    
    def get_functions_total(self):
        return len(self.functions)
    
    def get_functions_coverage_percentage(self):
        return self.get_functions_executed() / self.get_functions_total() * 100

class Line:
    line_number = 0
    executed = False

def handle_coverage_stats(file):
    if file['file'] not in file_coverage_stats:
        file_coverage_stats[file['file']] = CoverageStats()

    cov_stats = file_coverage_stats[file['file']]

    distinct_lines = set([line['line_number'] for line in file['lines']])
    cov_stats.lines = {**{line: cov_stats.lines.get(line, False) for line in distinct_lines}, **cov_stats.lines}

    for line in file['lines']:
        if line['count'] > 0:   
            cov_stats.lines[line['line_number']] = True

    distinct_functions = set([function['name'] for function in file['functions']])
    cov_stats.functions = {**{function: cov_stats.functions.get(function, False) for function in distinct_functions}, **cov_stats.functions}

    for function in file['functions']:
        if function['execution_count'] > 0:
            cov_stats.functions[function['name']] = True

def should_handle_file(filename):
    if args.exclude:
        if re.match(args.exclude, filename):
            return False
    return not filename.startswith("/")

def gather_stats_from(filename):
    with open(filename) as json_file:
        d = json.load(json_file)
        for file in d["files"]:
            if(should_handle_file(file["file"])): handle_coverage_stats(file)

for f in glob("**/*.gcno", recursive=True):
    filename = os.path.basename(f).replace(".gcno", "")
    filename += ".gcov.json"
    subprocess.run(["gcov", "-j", f], capture_output=True)
    subprocess.run(["gzip", "-d", "-f", f"{filename}.gz"], capture_output=True)
    gather_stats_from(filename)

now = datetime.now()

html_base = main_html_template
html_base = html_base.replace("$DATE$", now.strftime("%Y-%m-%d %H:%M:%S"))

lines_exec = sum(stats.get_lines_executed() for stats in file_coverage_stats.values())
lines_total = sum(stats.get_lines_total() for stats in file_coverage_stats.values())
lines_coverage_percentage = (lines_exec / lines_total) * 100 if lines_total > 0 else 0
lines_coverage_style = "coverage-high" if lines_coverage_percentage >= 90 else "coverage-medium" if lines_coverage_percentage >= 75 else "coverage-low"

html_base = html_base.replace(lines_exec_tag, str(lines_exec))
html_base = html_base.replace(lines_total_tag, str(lines_total))
html_base = html_base.replace(lines_coverage_percentage_tag, f"{lines_coverage_percentage:.1f}%")
html_base = html_base.replace(lines_coverage_style_tag, lines_coverage_style)

functions_exec = sum(stats.get_functions_executed() for stats in file_coverage_stats.values())
functions_total = sum(stats.get_functions_total() for stats in file_coverage_stats.values())
functions_coverage_percentage = (functions_exec / functions_total) * 100 if functions_total > 0 else 0
functions_coverage_style = "coverage-high" if functions_coverage_percentage >= 90 else "coverage-medium" if functions_coverage_percentage >= 75 else "coverage-low"

html_base = html_base.replace(functions_exec_tag, str(functions_exec))
html_base = html_base.replace(functions_total_tag, str(functions_total))
html_base = html_base.replace(functions_coverage_percentage_tag, f"{functions_coverage_percentage:.1f}%")
html_base = html_base.replace(functions_coverage_style_tag, functions_coverage_style)

files_html = ""

for file, stats in file_coverage_stats.items():
    file_html = file_coverage_html_template
    file_html = file_html.replace(filename_tage, file)
    file_html = file_html.replace(lines_exec_tag, str(stats.get_lines_executed()))
    file_html = file_html.replace(lines_total_tag, str(stats.get_lines_total()))
    file_html = file_html.replace(lines_coverage_style_tag, "coverage-high" if stats.get_lines_coverage_percentage() >= 90 else "coverage-medium" if stats.get_lines_coverage_percentage() >= 75 else "coverage-low")
    file_html = file_html.replace(lines_coverage_percentage_tag, f"{stats.get_lines_coverage_percentage():.1f}")
    file_html = file_html.replace(lines_coverage_value_tag, f"{stats.get_lines_coverage_percentage():.1f}")
    file_html = file_html.replace(functions_exec_tag, str(stats.get_functions_executed()))
    file_html = file_html.replace(functions_total_tag, str(stats.get_functions_total()))
    file_html = file_html.replace(functions_coverage_style_tag, "coverage-high" if stats.get_functions_coverage_percentage() >= 90 else "coverage-medium" if stats.get_functions_coverage_percentage() >= 75 else "coverage-low")
    file_html = file_html.replace(functions_coverage_percentage_tag, f"{stats.get_functions_coverage_percentage():.1f}")
    files_html += file_html
    
html_base = html_base.replace(files_tag, files_html)
    
with open("ppcov-report.html", "w") as f:
    f.write(html_base)

with open('ppcov-report.css', 'w') as f:
    f.write(main_css)